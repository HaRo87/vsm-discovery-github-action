{"version":3,"file":"index.js","mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC/CA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;AAAA;;;;;;;;;ACAA;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC7BA;AACA;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../webpack://vsm-discovery-github-action/./src/discovery-api.js","../webpack://vsm-discovery-github-action/./src/mtm.js","../webpack://vsm-discovery-github-action/../../../../../opt/hostedtoolcache/node/17.8.0/x64/lib/node_modules/@vercel/ncc/dist/ncc/@@notfound.js","../webpack://vsm-discovery-github-action/external node-commonjs \"fs\"","../webpack://vsm-discovery-github-action/webpack/bootstrap","../webpack://vsm-discovery-github-action/webpack/runtime/compat","../webpack://vsm-discovery-github-action/./src/index.js"],"sourcesContent":["function createConnectorCallInit(host, jwtToken) {\n    return {\n        host: host,\n        path: \"/services/cicd-connector/v2/deployment\",\n        method: \"POST\",\n        protocol: \"https:\",\n        headers: {\n            Authorization: `Bearer ` + jwtToken,\n        },\n    };\n}\n\nfunction registerService(host, bearerToken, {id, sbomFile, sourceType, sourceInstance, name, description,}) {\n    console.log(`Registering service and SBOM with following details. id: ${id}, sourceType: ${sourceType}, sourceInstance: ${sourceInstance}, name: ${name}, description: ${description}`)\n\n    return Promise.resolve()\n    // const options = createConnectorCallInit(host, bearerToken);\n    // const formData = new FormData();\n    // formData.append(\"id\", id);\n    // formData.append(\"sourceType\", sourceType);\n    // formData.append(\"sourceInstance\", sourceInstance);\n    // formData.append(\"name\", name);\n    // formData.append(\"description\", description);\n    // // formData.append(\"data\", JSON.stringify(data));\n    // formData.append(\"bom\", sbomFile);\n    //\n    // return new Promise((resolve, reject) => {\n    //     const req = formData.submit(options, (err, res) => {\n    //         if (err) {\n    //             console.error(`Http-response to discovery API was not ok. http status response: ${res.statusCode}. Error message: ${err.message}`);\n    //             return reject(new Error(err.message));\n    //         }\n    //         if (res.statusCode < 200 || res.statusCode > 299) {\n    //             return reject(new Error(`HTTP status code ${res.statusCode}`));\n    //         }\n    //         const body = [];\n    //         res.on(\"data\", (chunk) => body.push(chunk));\n    //         res.on(\"end\", () => {\n    //             const resString = Buffer.concat(body).toString();\n    //             resolve(resString);\n    //         });\n    //     });\n    // })\n    //     .then((result) => {\n    //         return result;\n    //     })\n    //     .catch((reason) => {\n    //         console.error(\"Couldn't access the API\");\n    //         throw new Error(reason);\n    //     });\n}\n\n\nmodule.exports = {registerService}","const base64 = require(\"base-64\");\nconst fetch = require(\"node-fetch\");\n\nfunction createAPIAccessTokenRequestInit(secret) {\n    const headers = new fetch.Headers();\n    headers.append(\n        \"Authorization\",\n        \"Basic \" + base64.encode(\"apitoken:\" + secret)\n    );\n    headers.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    return {\n        method: \"post\",\n        auth: {\n            user: \"apitoken\",\n            password: secret,\n        },\n        body: \"grant_type=client_credentials\",\n        headers: headers,\n        json: true,\n    };\n}\n\nfunction authenticate(token, host) {\n    return fetch(\n        \"https://\" + host + \"/services/mtm/v1/oauth2/token\",\n        createAPIAccessTokenRequestInit(token)\n    )\n        .then((response) => {\n            if (!response.ok) {\n                throw new Error(\n                    \"Http-response was not ok - http status response: \" +\n                    response.status +\n                    \" \" +\n                    response.statusText\n                );\n            }\n            return response.json();\n        })\n        .then((json) => {\n            return json.access_token;\n        })\n        .catch((reason) => {\n            console.error(\"Couldn't get API-Token!\");\n            throw new Error(reason);\n        });\n}\n\nmodule.exports = {authenticate}",null,"module.exports = require(\"fs\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\tvar threw = true;\n\ttry {\n\t\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\t\tthrew = false;\n\t} finally {\n\t\tif(threw) delete __webpack_module_cache__[moduleId];\n\t}\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\nif (typeof __webpack_require__ !== 'undefined') __webpack_require__.ab = __dirname + \"/\";","const core = require('@actions/core');\nconst github = require('@actions/github');\nconst {authenticate} = require('./mtm')\nconst {registerService} = require('./discovery-api')\nconst fs = require(\"fs\");\n\nfunction getSbomFile(sbomFilePath) {\n    console.log(\"Getting generated sbom file\");\n    if (!sbomFilePath || !fs.existsSync(sbomFilePath)) {\n        core.warning(\"Could not find dependency file\");\n        return null;\n    }\n\n    try { // validate if the file is a valid sbom json file\n        let file = fs.readFileSync(sbomFilePath, 'utf-8');\n        JSON.parse(file)\n    } catch (e) {\n        core.warning(`Invalid CycloneDX SBOM json file. Error: ${e.message}`);\n        return null;\n    }\n\n    return fs.createReadStream(sbomFilePath);\n}\n\nfunction getGitHubRepoName() {\n    return github.event.repository.name\n}\n\nfunction getGitHubRepoDescription() {\n    return github.event.repository.description\n}\n\nfunction getGitHubOrgName() {\n    return github.event.repository.organization.name\n}\n\nfunction validateInputs(inputs) {\n    // todo complete\n}\n\n\nasync function main(inputs) {\n    const {token, host, sbomFilePath, } = inputs\n    const bearerToken = await authenticate(token, host)\n\n    const serviceName = getGitHubRepoName()\n    const sourceInstance = getGitHubOrgName()\n    const sourceType = 'cicd'\n    const defaults = {\n        id: `${sourceType}-${sourceInstance}-${serviceName}`, sourceType, sourceInstance, name: serviceName, description: getGitHubRepoDescription()\n    }\n    const withOverrideDefaults = {\n        ...defaults,\n        ...inputs\n    }\n\n    await registerService(host, bearerToken, {\n        ...withOverrideDefaults,\n        sbomFile: getSbomFile(sbomFilePath)\n    })\n}\n\nmain({}).then()"],"names":[],"sourceRoot":""}